"use strict";

var _webpage = require("webpage");

var _webpage2 = _interopRequireDefault(_webpage);

var _system = require("system");

var _system2 = _interopRequireDefault(_system);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var objectSpace = {
    phantom: phantom
};

var haveCallbacks = ['open', 'includeJs'];

var commands = {
    createPage: function createPage(command) {
        var page = _webpage2.default.create();
        objectSpace['page$' + command.id] = page;
        page.onClosing = function () {
            return delete objectSpace['page$' + command.id];
        };

        command.response = { pageId: command.id };
        completeCommand(command);
    },
    exit: function exit(command) {
        if (command.target === 'phantom') {
            phantom.exit();
        }
    },
    property: function property(command) {
        if (command.params.length == 2) {
            objectSpace[command.target][command.params[0]] = command.params[1];
        } else {
            command.response = objectSpace[command.target][command.params[0]];
        }

        completeCommand(command);
    },
    setting: function setting(command) {
        if (command.params.length == 2) {
            objectSpace[command.target].settings[command.params[0]] = command.params[1];
        } else {
            command.response = objectSpace[command.target].settings[command.params[0]];
        }

        completeCommand(command);
    }
};

function read() {
    var line = _system2.default.stdin.readLine();
    if (line) {
        var command = JSON.parse(line, function (key, value) {

            if (value && typeof value === 'string' && value.substr(0, 8) == 'function' && value.indexOf('[native code]') === -1) {
                var startBody = value.indexOf('{') + 1;
                var endBody = value.lastIndexOf('}');
                var startArgs = value.indexOf('(') + 1;
                var endArgs = value.indexOf(')');

                return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));
            }
            return value;
        });

        try {
            executeCommand(command);
        } catch (e) {
            command.error = e.message;
            completeCommand(command);
        }
    }
}

function executeCommand(command) {
    if (commands[command.name]) {
        return commands[command.name](command);
    } else if (objectSpace[command.target]) {
        var target = objectSpace[command.target];
        var method = target[command.name];

        if (haveCallbacks.indexOf(command.name) === -1) {
            command.response = method.apply(target, command.params);
            completeCommand(command);
        } else {
            var params = command.params.slice(); // copy params
            params.push(function (status) {
                command.response = status;
                completeCommand(command);
            });
            method.apply(target, params);
        }
    } else {
        throw new Error("Cannot find " + command.name + " method to execute on " + command.target + " object.");
    }
}

function completeCommand(command) {
    _system2.default.stdout.writeLine('>' + JSON.stringify(command));
    read();
}

read();