"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _phantomjsPrebuilt = require("phantomjs-prebuilt");

var _phantomjsPrebuilt2 = _interopRequireDefault(_phantomjsPrebuilt);

var _child_process = require("child_process");

var _winston = require("winston");

var _winston2 = _interopRequireDefault(_winston);

var _os = require("os");

var _os2 = _interopRequireDefault(_os);

var _linerstream = require("linerstream");

var _linerstream2 = _interopRequireDefault(_linerstream);

var _page = require("./page");

var _page2 = _interopRequireDefault(_page);

var _command = require("./command");

var _command2 = _interopRequireDefault(_command);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = new _winston2.default.Logger({
    transports: [new _winston2.default.transports.Console({
        level: process.env.DEBUG === 'true' ? 'debug' : 'info',
        colorize: true
    })]
});

var Phantom = function () {
    function Phantom() {
        var _this = this;

        var args = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, Phantom);

        logger.debug("Starting " + _phantomjsPrebuilt2.default.path + " " + args.concat([__dirname + '/shim.js']).join(' '));
        this.process = (0, _child_process.spawn)(_phantomjsPrebuilt2.default.path, args.concat([__dirname + '/shim.js']));
        this.commands = new Map();

        this.process.stdin.setEncoding('utf-8');

        this.process.stdout.pipe(new _linerstream2.default()).on('data', function (data) {
            var message = data.toString('utf8');
            if (message[0] === '>') {
                var json = message.substr(1);
                logger.debug('Parsing: %s', json);
                var command = JSON.parse(json);

                var deferred = _this.commands.get(command.id).deferred;
                if (command.error === undefined) {
                    deferred.resolve(command.response);
                } else {
                    deferred.reject(new Error(command.error));
                }
                _this.commands.delete(command.id);
            } else {
                logger.info(message);
            }
        });

        this.process.stderr.on('data', function (data) {
            return logger.error(data);
        });
        this.process.on('exit', function (code) {
            return logger.debug("Child exited with code [" + code + "]");
        });
    }

    _createClass(Phantom, [{
        key: "createPage",
        value: function createPage() {
            var _this2 = this;

            return this.execute('phantom', 'createPage').then(function (response) {
                return new _page2.default(_this2, response.pageId);
            });
        }
    }, {
        key: "executeCommand",
        value: function executeCommand(command) {
            var resolve = undefined,
                reject = undefined;
            var promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
            });

            command.deferred = { resolve: resolve, reject: reject };

            this.commands.set(command.id, command);

            var json = JSON.stringify(command, function (key, val) {
                return typeof val === 'function' ? val.toString() : val;
            });
            logger.debug('Sending: %s', json);

            this.process.stdin.write(json + _os2.default.EOL, 'utf8');

            return promise;
        }
    }, {
        key: "execute",
        value: function execute(target, name) {
            var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

            return this.executeCommand(new _command2.default(null, target, name, args));
        }
    }, {
        key: "exit",
        value: function exit() {
            this.execute('phantom', 'exit');
        }
    }]);

    return Phantom;
}();

exports.default = Phantom;